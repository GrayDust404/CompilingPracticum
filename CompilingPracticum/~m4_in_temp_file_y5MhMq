m4_init()
m4_define([b4_actions], 
[b4_case(2, [b4_syncline(42, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("programstruct"),std::string(""),std::vector<int>{]b4_rhs_value(3, 1, [[ival]])[,]b4_rhs_value(3, 2, [[ival]])[,]b4_rhs_value(3, 3, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(3, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 2, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 3, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
					}]])

b4_case(3, [b4_syncline(60, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("program_head"),std::string(""),std::vector<int>{]b4_rhs_value(5, 2, [[ival]])[,]b4_rhs_value(5, 3, [[ival]])[,]b4_rhs_value(5, 4, [[ival]])[,]b4_rhs_value(5, 5, [[ival]])[},parseTree@{]b4_rhs_value(5, 2, [[ival]])[@}.getLineNum()));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(5, 2, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(5, 3, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(5, 4, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(5, 5, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
				   }]])

b4_case(4, [b4_syncline(72, [["parser.y"]])
[    {
					ParseError("Lack of left parenthesis",parseTree@{]b4_rhs_value(5, 2, [[ival]])[@}.getLineNum());
					}]])

b4_case(5, [b4_syncline(75, [["parser.y"]])
[    {
					ParseError("Lack of right parenthesis",parseTree@{parseTree.size()-1@}.getLineNum());
					}]])

b4_case(6, [b4_syncline(78, [["parser.y"]])
[    {
					ParseError("Lack of program",yylineno);
					}]])

b4_case(7, [b4_syncline(81, [["parser.y"]])
[    {
					ParseError("Lack of the name of the main function",parseTree@{parseTree.size()-1@}.getLineNum());
					}]])

b4_case(8, [b4_syncline(85, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("idlist"),std::string(""),std::vector<int>{]b4_rhs_value(3, 1, [[ival]])[,]b4_rhs_value(3, 2, [[ival]])[,]b4_rhs_value(3, 3, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(3, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 2, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 3, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
				   }]])

b4_case(9, [b4_syncline(96, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("idlist"),std::string(""),std::vector<int>{]b4_rhs_value(1, 1, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(1, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(10, [b4_syncline(105, [["parser.y"]])
[    {
					ParseError("Afferent null value",parseTree@{parseTree.size()-1@}.getLineNum());
					}]])

b4_case(11, [b4_syncline(108, [["parser.y"]])
[    {
					ParseError("Afferent null value",parseTree@{parseTree.size()-1@}.getLineNum());
					}]])

b4_case(12, [b4_syncline(112, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("program_body"),std::string(""),std::vector<int>{]b4_rhs_value(4, 1, [[ival]])[,]b4_rhs_value(4, 2, [[ival]])[,]b4_rhs_value(4, 3, [[ival]])[,]b4_rhs_value(4, 4, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(4, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(4, 2, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(4, 3, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(4, 4, [[ival]])[@}.setParent(parseTree.size() - 1);
}]])

b4_case(13, [b4_syncline(123, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("const_declarations"),std::string(""),std::vector<int>{}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(14, [b4_syncline(131, [["parser.y"]])
[    {				   
				   parseTree.push_back(ParseTreeNode(std::string("const_declarations"),std::string(""),std::vector<int>{]b4_rhs_value(3, 1, [[ival]])[,]b4_rhs_value(3, 2, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(3, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 2, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
				   }]])

b4_case(15, [b4_syncline(142, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("const_declaration"),std::string(""),std::vector<int>{]b4_rhs_value(5, 1, [[ival]])[,]b4_rhs_value(5, 2, [[ival]])[,]b4_rhs_value(5, 3, [[ival]])[,]b4_rhs_value(5, 4, [[ival]])[,]b4_rhs_value(5, 5, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(5, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(5, 2, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(5, 3, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(5, 4, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(5, 5, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(16, [b4_syncline(155, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("const_declaration"),std::string(""),std::vector<int>{]b4_rhs_value(3, 1, [[ival]])[,]b4_rhs_value(3, 2, [[ival]])[,]b4_rhs_value(3, 3, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(3, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 2, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 3, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;	
}]])

b4_case(17, [b4_syncline(166, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("const_value"),std::string(""),std::vector<int>{]b4_rhs_value(2, 1, [[ival]])[,]b4_rhs_value(2, 2, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(2, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(2, 2, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;	
}]])

b4_case(18, [b4_syncline(176, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("const_value"),std::string(""),std::vector<int>{]b4_rhs_value(2, 1, [[ival]])[,]b4_rhs_value(2, 2, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(2, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(2, 2, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;		
}]])

b4_case(19, [b4_syncline(186, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("const_value"),std::string(""),std::vector<int>{]b4_rhs_value(1, 1, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(1, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;	
}]])

b4_case(20, [b4_syncline(195, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("const_value"),std::string(""),std::vector<int>{]b4_rhs_value(2, 1, [[ival]])[,]b4_rhs_value(2, 2, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(2, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(2, 2, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;		
}]])

b4_case(21, [b4_syncline(205, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("const_value"),std::string(""),std::vector<int>{]b4_rhs_value(2, 1, [[ival]])[,]b4_rhs_value(2, 2, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(2, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(2, 2, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;	
}]])

b4_case(22, [b4_syncline(215, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("const_value"),std::string(""),std::vector<int>{]b4_rhs_value(1, 1, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(1, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;	
}]])

b4_case(23, [b4_syncline(224, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("const_value"),std::string(""),std::vector<int>{]b4_rhs_value(2, 1, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(2, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(24, [b4_syncline(233, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("const_value"),std::string(""),std::vector<int>{]b4_rhs_value(2, 1, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(2, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(25, [b4_syncline(242, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("const_value"),std::string(""),std::vector<int>{]b4_rhs_value(1, 1, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(1, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(26, [b4_syncline(251, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("const_value"),std::string(""),std::vector<int>{]b4_rhs_value(1, 1, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(1, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;	
}]])

b4_case(27, [b4_syncline(261, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("var_declarations"),std::string(""),std::vector<int>{}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(28, [b4_syncline(269, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("var_declarations"),std::string(""),std::vector<int>{]b4_rhs_value(3, 1, [[ival]])[,]b4_rhs_value(3, 2, [[ival]])[,]b4_rhs_value(3, 3, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(3, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 2, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 3, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;	
}]])

b4_case(29, [b4_syncline(280, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("var_declaration"),std::string(""),std::vector<int>{]b4_rhs_value(3, 1, [[ival]])[,]b4_rhs_value(3, 2, [[ival]])[,]b4_rhs_value(3, 3, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(3, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 2, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 3, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(30, [b4_syncline(291, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("var_declaration"),std::string(""),std::vector<int>{]b4_rhs_value(5, 1, [[ival]])[,]b4_rhs_value(5, 2, [[ival]])[,]b4_rhs_value(5, 3, [[ival]])[,]b4_rhs_value(5, 4, [[ival]])[,]b4_rhs_value(5, 5, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(5, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(5, 2, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(5, 3, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(5, 4, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(5, 5, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(31, [b4_syncline(305, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("subprogram_declarations"),std::string(""),std::vector<int>{}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;	
}]])

b4_case(32, [b4_syncline(313, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("subprogram_declarations"),std::string(""),std::vector<int>{]b4_rhs_value(3, 1, [[ival]])[,]b4_rhs_value(3, 2, [[ival]])[,]b4_rhs_value(3, 3, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(3, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 2, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 3, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(33, [b4_syncline(324, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("subprogram"),std::string(""),std::vector<int>{]b4_rhs_value(3, 1, [[ival]])[,]b4_rhs_value(3, 2, [[ival]])[,]b4_rhs_value(3, 3, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(3, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 2, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 3, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;		
}]])

b4_case(34, [b4_syncline(335, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("subprogram_head"),std::string(""),std::vector<int>{]b4_rhs_value(3, 2, [[ival]])[,]b4_rhs_value(3, 3, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(3, 2, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 3, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;	
}]])

b4_case(35, [b4_syncline(345, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("subprogram_head"),std::string(""),std::vector<int>{]b4_rhs_value(5, 1, [[ival]])[,]b4_rhs_value(5, 2, [[ival]])[,]b4_rhs_value(5, 3, [[ival]])[,]b4_rhs_value(5, 4, [[ival]])[,]b4_rhs_value(5, 5, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(5, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(5, 2, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(5, 3, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(5, 4, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(5, 5, [[ival]])[@}.setParent(parseTree.size() - 1);
}]])

b4_case(36, [b4_syncline(356, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("formal_parameter"),std::string(""),std::vector<int>{}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(37, [b4_syncline(364, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("formal_parameter"),std::string(""),std::vector<int>{]b4_rhs_value(3, 1, [[ival]])[,]b4_rhs_value(3, 2, [[ival]])[,]b4_rhs_value(3, 3, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(3, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 2, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 3, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(38, [b4_syncline(375, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("parameter_list"),std::string(""),std::vector<int>{]b4_rhs_value(3, 1, [[ival]])[,]b4_rhs_value(3, 2, [[ival]])[,]b4_rhs_value(3, 3, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(3, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 2, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 3, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(39, [b4_syncline(386, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("parameter_list"),std::string(""),std::vector<int>{]b4_rhs_value(1, 1, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(1, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(40, [b4_syncline(395, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("parameter"),std::string(""),std::vector<int>{]b4_rhs_value(1, 1, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(1, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(41, [b4_syncline(404, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("parameter"),std::string(""),std::vector<int>{]b4_rhs_value(1, 1, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(1, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(42, [b4_syncline(413, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("var_parameter"),std::string(""),std::vector<int>{]b4_rhs_value(2, 1, [[ival]])[,]b4_rhs_value(2, 2, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(2, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(2, 2, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;	
}]])

b4_case(43, [b4_syncline(423, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("value_parameter"),std::string(""),std::vector<int>{]b4_rhs_value(3, 1, [[ival]])[,]b4_rhs_value(3, 2, [[ival]])[,]b4_rhs_value(3, 3, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(3, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 2, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 3, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(44, [b4_syncline(434, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("subprogram_body"),std::string(""),std::vector<int>{]b4_rhs_value(3, 1, [[ival]])[,]b4_rhs_value(3, 2, [[ival]])[,]b4_rhs_value(3, 3, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(3, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 2, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 3, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(45, [b4_syncline(446, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("compound_statement"),std::string(""),std::vector<int>{]b4_rhs_value(3, 2, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(3, 2, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(46, [b4_syncline(455, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("statement_list"),std::string(""),std::vector<int>{]b4_rhs_value(3, 1, [[ival]])[,]b4_rhs_value(3, 2, [[ival]])[,]b4_rhs_value(3, 3, [[ival]])[},parseTree@{]b4_rhs_value(3, 3, [[ival]])[@}.getLineNum()));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(3, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 2, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 3, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(47, [b4_syncline(466, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("statement_list"),std::string(""),std::vector<int>{]b4_rhs_value(1, 1, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(1, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(48, [b4_syncline(475, [["parser.y"]])
[    {
					ParseError("Lack of semicolons",parseTree@{]b4_lhs_value([[ival]])[@}.getLineNum());
					parseTree@{]b4_lhs_value([[ival]])[@}.setLineNum(parseTree@{]b4_rhs_value(3, 3, [[ival]])[@}.getLineNum());
				}]])

b4_case(49, [b4_syncline(479, [["parser.y"]])
[    {
					ParseError("**************************",parseTree@{parseTree.size()-1@}.getLineNum());
				}]])

b4_case(50, [b4_syncline(483, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("statement"),std::string(""),std::vector<int>{}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(51, [b4_syncline(491, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("statement"),std::string(""),std::vector<int>{]b4_rhs_value(3, 1, [[ival]])[,]b4_rhs_value(3, 2, [[ival]])[,]b4_rhs_value(3, 3, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(3, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 2, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 3, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(52, [b4_syncline(502, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("statement"),std::string(""),std::vector<int>{]b4_rhs_value(1, 1, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(1, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(53, [b4_syncline(511, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("statement"),std::string(""),std::vector<int>{]b4_rhs_value(1, 1, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(1, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(54, [b4_syncline(520, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("statement"),std::string(""),std::vector<int>{]b4_rhs_value(5, 1, [[ival]])[,]b4_rhs_value(5, 2, [[ival]])[,]b4_rhs_value(5, 3, [[ival]])[,]b4_rhs_value(5, 4, [[ival]])[,]b4_rhs_value(5, 5, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(5, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(5, 2, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(5, 3, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(5, 4, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(5, 5, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(55, [b4_syncline(533, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("statement"),std::string(""),std::vector<int>{]b4_rhs_value(8, 1, [[ival]])[,]b4_rhs_value(8, 2, [[ival]])[,]b4_rhs_value(8, 3, [[ival]])[,]b4_rhs_value(8, 4, [[ival]])[,]b4_rhs_value(8, 5, [[ival]])[,]b4_rhs_value(8, 6, [[ival]])[,]b4_rhs_value(8, 7, [[ival]])[,]b4_rhs_value(8, 8, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(8, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(8, 2, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(8, 3, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(8, 4, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(8, 5, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(8, 6, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(8, 7, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(8, 8, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(56, [b4_syncline(549, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("statement"),std::string(""),std::vector<int>{]b4_rhs_value(4, 1, [[ival]])[,]b4_rhs_value(4, 2, [[ival]])[,]b4_rhs_value(4, 3, [[ival]])[,]b4_rhs_value(4, 4, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(4, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(4, 2, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(4, 3, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(4, 4, [[ival]])[@}.setParent(parseTree.size() - 1);
}]])

b4_case(57, [b4_syncline(559, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("else_part"),std::string(""),std::vector<int>{}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(58, [b4_syncline(567, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("else_part"),std::string(""),std::vector<int>{]b4_rhs_value(2, 1, [[ival]])[,]b4_rhs_value(2, 2, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(2, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(2, 2, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(59, [b4_syncline(578, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("procedure_call"),std::string(""),std::vector<int>{]b4_rhs_value(1, 1, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(1, 1, [[ival]])[@}.setParent(parseTree.size() - 1);				
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(60, [b4_syncline(587, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("procedure_call"),std::string(""),std::vector<int>{]b4_rhs_value(4, 1, [[ival]])[,]b4_rhs_value(4, 2, [[ival]])[,]b4_rhs_value(4, 3, [[ival]])[,]b4_rhs_value(4, 4, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(4, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(4, 2, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(4, 3, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(4, 4, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(61, [b4_syncline(599, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("variable"),std::string(""),std::vector<int>{]b4_rhs_value(2, 1, [[ival]])[,]b4_rhs_value(2, 2, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(2, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(2, 2, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(62, [b4_syncline(609, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("id_varpart"),std::string(""),std::vector<int>{}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
}]])

b4_case(63, [b4_syncline(615, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("id_varpart"),std::string(""),std::vector<int>{]b4_rhs_value(3, 1, [[ival]])[,]b4_rhs_value(3, 2, [[ival]])[,]b4_rhs_value(3, 3, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(3, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 2, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 3, [[ival]])[@}.setParent(parseTree.size() - 1);
}]])

b4_case(64, [b4_syncline(624, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("expression_list"),std::string(""),std::vector<int>{]b4_rhs_value(3, 1, [[ival]])[,]b4_rhs_value(3, 2, [[ival]])[,]b4_rhs_value(3, 3, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(3, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 2, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 3, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(65, [b4_syncline(635, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("expression_list"),std::string(""),std::vector<int>{]b4_rhs_value(1, 1, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(1, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(66, [b4_syncline(644, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("expression"),std::string(""),std::vector<int>{]b4_rhs_value(1, 1, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(1, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(67, [b4_syncline(653, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("expression"),std::string(""),std::vector<int>{]b4_rhs_value(3, 1, [[ival]])[,]b4_rhs_value(3, 2, [[ival]])[,]b4_rhs_value(3, 3, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(3, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 2, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 3, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;		
}]])

b4_case(68, [b4_syncline(664, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("expression"),std::string(""),std::vector<int>{]b4_rhs_value(3, 1, [[ival]])[,]b4_rhs_value(3, 2, [[ival]])[,]b4_rhs_value(3, 3, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(3, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 2, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 3, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(69, [b4_syncline(675, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("expression"),std::string(""),std::vector<int>{]b4_rhs_value(3, 1, [[ival]])[,]b4_rhs_value(3, 2, [[ival]])[,]b4_rhs_value(3, 3, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(3, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 2, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 3, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(70, [b4_syncline(686, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("expression"),std::string(""),std::vector<int>{]b4_rhs_value(3, 1, [[ival]])[,]b4_rhs_value(3, 2, [[ival]])[,]b4_rhs_value(3, 3, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(3, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 2, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 3, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(71, [b4_syncline(697, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("expression"),std::string(""),std::vector<int>{]b4_rhs_value(3, 1, [[ival]])[,]b4_rhs_value(3, 2, [[ival]])[,]b4_rhs_value(3, 3, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(3, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 2, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 3, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(72, [b4_syncline(708, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("expression"),std::string(""),std::vector<int>{]b4_rhs_value(3, 1, [[ival]])[,]b4_rhs_value(3, 2, [[ival]])[,]b4_rhs_value(3, 3, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(3, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 2, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 3, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(73, [b4_syncline(719, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("simple_expression"),std::string(""),std::vector<int>{]b4_rhs_value(3, 1, [[ival]])[,]b4_rhs_value(3, 2, [[ival]])[,]b4_rhs_value(3, 3, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(3, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 2, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 3, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(74, [b4_syncline(730, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("simple_expression"),std::string(""),std::vector<int>{]b4_rhs_value(3, 1, [[ival]])[,]b4_rhs_value(3, 2, [[ival]])[,]b4_rhs_value(3, 3, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(3, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 2, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 3, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(75, [b4_syncline(741, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("simple_expression"),std::string(""),std::vector<int>{]b4_rhs_value(3, 1, [[ival]])[,]b4_rhs_value(3, 2, [[ival]])[,]b4_rhs_value(3, 3, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(3, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 2, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 3, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(76, [b4_syncline(752, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("simple_expression"),std::string(""),std::vector<int>{]b4_rhs_value(1, 1, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(1, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(77, [b4_syncline(761, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("term"),std::string(""),std::vector<int>{]b4_rhs_value(3, 1, [[ival]])[,]b4_rhs_value(3, 2, [[ival]])[,]b4_rhs_value(3, 3, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(3, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 2, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 3, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(78, [b4_syncline(772, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("term"),std::string(""),std::vector<int>{]b4_rhs_value(3, 1, [[ival]])[,]b4_rhs_value(3, 2, [[ival]])[,]b4_rhs_value(3, 3, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(3, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 2, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 3, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(79, [b4_syncline(783, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("term"),std::string(""),std::vector<int>{]b4_rhs_value(3, 1, [[ival]])[,]b4_rhs_value(3, 2, [[ival]])[,]b4_rhs_value(3, 3, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(3, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 2, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 3, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(80, [b4_syncline(794, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("term"),std::string(""),std::vector<int>{]b4_rhs_value(3, 1, [[ival]])[,]b4_rhs_value(3, 2, [[ival]])[,]b4_rhs_value(3, 3, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(3, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 2, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 3, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(81, [b4_syncline(805, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("term"),std::string(""),std::vector<int>{]b4_rhs_value(3, 1, [[ival]])[,]b4_rhs_value(3, 2, [[ival]])[,]b4_rhs_value(3, 3, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(3, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 2, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 3, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(82, [b4_syncline(816, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("term"),std::string(""),std::vector<int>{]b4_rhs_value(1, 1, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(1, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(83, [b4_syncline(825, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("factor"),std::string(""),std::vector<int>{]b4_rhs_value(1, 1, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(1, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(84, [b4_syncline(834, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("factor"),std::string(""),std::vector<int>{]b4_rhs_value(1, 1, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(1, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(85, [b4_syncline(843, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("factor"),std::string(""),std::vector<int>{]b4_rhs_value(1, 1, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(1, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(86, [b4_syncline(852, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("factor"),std::string(""),std::vector<int>{]b4_rhs_value(4, 1, [[ival]])[,]b4_rhs_value(4, 2, [[ival]])[,]b4_rhs_value(4, 3, [[ival]])[,]b4_rhs_value(4, 4, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(4, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(4, 2, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(4, 3, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(4, 4, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(87, [b4_syncline(864, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("factor"),std::string(""),std::vector<int>{]b4_rhs_value(3, 1, [[ival]])[,]b4_rhs_value(3, 2, [[ival]])[,]b4_rhs_value(3, 3, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(3, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 2, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 3, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(88, [b4_syncline(875, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("factor"),std::string(""),std::vector<int>{]b4_rhs_value(2, 1, [[ival]])[,]b4_rhs_value(2, 2, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(2, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(2, 2, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(89, [b4_syncline(885, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("factor"),std::string(""),std::vector<int>{]b4_rhs_value(2, 1, [[ival]])[,]b4_rhs_value(2, 2, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(2, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(2, 2, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;	
}]])

b4_case(90, [b4_syncline(896, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("type"),std::string(""),std::vector<int>{]b4_rhs_value(1, 1, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(1, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   //设置根节点，仅最上层规则需要 
				   parseTreeRoot = parseTree.size() - 1;
}]])

b4_case(91, [b4_syncline(905, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("type"),std::string(""),std::vector<int>{]b4_rhs_value(6, 1, [[ival]])[,]b4_rhs_value(6, 2, [[ival]])[,]b4_rhs_value(6, 3, [[ival]])[,]b4_rhs_value(6, 4, [[ival]])[,]b4_rhs_value(6, 5, [[ival]])[,]b4_rhs_value(6, 6, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(6, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(6, 2, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(6, 3, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(6, 4, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(6, 5, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(6, 6, [[ival]])[@}.setParent(parseTree.size() - 1);
}]])

b4_case(92, [b4_syncline(918, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("period"),std::string(""),std::vector<int>{]b4_rhs_value(5, 1, [[ival]])[,]b4_rhs_value(5, 2, [[ival]])[,]b4_rhs_value(5, 3, [[ival]])[,]b4_rhs_value(5, 4, [[ival]])[,]b4_rhs_value(5, 5, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(5, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(5, 2, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(5, 3, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(5, 4, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(5, 5, [[ival]])[@}.setParent(parseTree.size() - 1);
}]])

b4_case(93, [b4_syncline(929, [["parser.y"]])
[    {
				   parseTree.push_back(ParseTreeNode(std::string("period"),std::string(""),std::vector<int>{]b4_rhs_value(3, 1, [[ival]])[,]b4_rhs_value(3, 2, [[ival]])[,]b4_rhs_value(3, 3, [[ival]])[}));
				   //记录指向本节点的指针
				   ]b4_lhs_value([[ival]])[ = parseTree.size() - 1;
				   //为子节点设置父节点指针
				   parseTree@{]b4_rhs_value(3, 1, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 2, [[ival]])[@}.setParent(parseTree.size() - 1);
				   parseTree@{]b4_rhs_value(3, 3, [[ival]])[@}.setParent(parseTree.size() - 1);
}]])

])

m4_define([b4_mergers], 
[[]])

m4_define([b4_tokens], 
[[[[id]], 258],
[[[semicolon]], 259],
[[[comma]], 260],
[[[_const]], 261],
[[[_var]], 262],
[[[colon]], 263],
[[[simple_type]], 264],
[[[assignop]], 265],
[[[digits]], 266],
[[[assign]], 267],
[[[relop]], 268],
[[[plus]], 269],
[[[minus]], 270],
[[[letter]], 271],
[[[procedure]], 272],
[[[function]], 273],
[[[num]], 274],
[[[_array]], 275],
[[[multiply]], 276],
[[[divide]], 277],
[[[_div]], 278],
[[[_mod]], 279],
[[[_and]], 280],
[[[_not]], 281],
[[[_if]], 282],
[[[_then]], 283],
[[[_for]], 284],
[[[_else]], 285],
[[[_to]], 286],
[[[_do]], 287],
[[[_or]], 288],
[[[_of]], 289],
[[[_range]], 290],
[[[_while]], 291],
[[[noequal]], 292],
[[[GE]], 293],
[[[GT]], 294],
[[[LE]], 295],
[[[LT]], 296],
[[[leftB]], 297],
[[[rightB]], 298],
[[[leftSB]], 299],
[[[rightSB]], 300],
[[[program]], 301],
[[[BEGINTOK]], 302],
[[[ENDTOK]], 303]])

m4_define([b4_symbol_destructors], 
[])

m4_define([b4_symbol_printers], 
[])

m4_define([b4_translate],
[[     0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48]])


m4_define([b4_use_push_for_pull_flag],
[[0]])


m4_define([b4_pact_ninf],
[[-101]])


m4_define([b4_conflict_list_heads],
[[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0]])


m4_define([b4_toknum_max],
[[303]])


m4_define([b4_rhs],
[[    50,     0,    -1,    51,     4,    53,    -1,    46,     3,    42,
      52,    43,    -1,    46,     3,     1,    52,    43,    -1,    46,
       3,    42,    52,     1,    -1,     1,     3,    42,    52,    43,
      -1,    46,     1,    42,    52,    43,    -1,    52,     5,     3,
      -1,     3,    -1,    52,     5,     1,    -1,    52,     1,     3,
      -1,    54,    57,    59,    68,    -1,    -1,     6,    55,     4,
      -1,    55,     4,     3,    12,    56,    -1,     3,    12,    56,
      -1,    14,     3,    -1,    15,     3,    -1,     3,    -1,    14,
      11,    -1,    15,    11,    -1,    11,    -1,    14,    19,    -1,
      15,    19,    -1,    19,    -1,    16,    -1,    -1,     7,    58,
       4,    -1,    52,     8,    80,    -1,    58,     4,    52,     8,
      80,    -1,    -1,    59,    60,     4,    -1,    61,     4,    67,
      -1,    17,     3,    62,    -1,    18,     3,    62,     8,     9,
      -1,    -1,    42,    63,    43,    -1,    63,     4,    64,    -1,
      64,    -1,    65,    -1,    66,    -1,     7,    66,    -1,    52,
       8,     9,    -1,    54,    57,    68,    -1,    47,    69,    48,
      -1,    69,     4,    70,    -1,    70,    -1,    69,     1,    70,
      -1,     1,     4,    70,    -1,    -1,    73,    10,    76,    -1,
      72,    -1,    68,    -1,    27,    76,    28,    70,    71,    -1,
      29,     3,    10,    76,    31,    76,    32,    70,    -1,    36,
      76,    32,    70,    -1,    -1,    30,    70,    -1,     3,    -1,
       3,    42,    75,    43,    -1,     3,    74,    -1,    -1,    44,
      75,    45,    -1,    75,     5,    76,    -1,    76,    -1,    77,
      -1,    77,    12,    77,    -1,    77,    37,    77,    -1,    77,
      38,    77,    -1,    77,    39,    77,    -1,    77,    40,    77,
      -1,    77,    41,    77,    -1,    77,    14,    78,    -1,    77,
      15,    78,    -1,    77,    33,    78,    -1,    78,    -1,    78,
      21,    79,    -1,    78,    22,    79,    -1,    78,    23,    79,
      -1,    78,    24,    79,    -1,    78,    25,    79,    -1,    79,
      -1,    19,    -1,    11,    -1,    73,    -1,     3,    42,    75,
      43,    -1,    42,    76,    43,    -1,    26,    79,    -1,    15,
      79,    -1,     9,    -1,    20,    44,    81,    45,    34,     9,
      -1,    81,     5,    11,    35,    11,    -1,    11,    35,    11,
      -1]])


m4_define([b4_last],
[[204]])


m4_define([b4_stos_min],
[[0]])


m4_define([b4_tag_seen_flag],
[[1]])


m4_define([b4_token_table_flag],
[[0]])


m4_define([b4_parser_file_name],
[[parser.tab.cpp]])


m4_define([b4_table_min],
[[-62]])


m4_define([b4_table],
[[    79,    99,    56,   104,   121,     1,    12,   155,    64,   126,
       6,   127,     7,    70,   124,    71,   -50,   105,    71,    65,
     106,   146,   147,    26,    26,    26,   128,    27,    27,    27,
      31,   165,   166,   167,    27,    79,   158,   148,   151,    72,
     158,    73,    72,   158,    73,   163,   156,    13,    74,   161,
       2,    74,    79,    79,   173,   174,   175,   176,   177,    53,
     -50,   179,    53,   -62,   107,    28,    29,    30,    18,    19,
      20,    21,    32,   178,   159,    17,    79,    92,   152,   114,
     160,   187,    35,    51,    52,    93,    39,   186,    40,    94,
     131,   132,    79,    95,    41,    89,   130,    90,   131,   132,
      96,   125,    42,    90,   193,    43,    44,    45,    67,   133,
      46,     8,   197,    53,   180,     5,    97,   133,    57,   194,
      60,   134,   135,   136,   137,   138,    58,     9,    61,   139,
     140,   141,   142,   143,    59,    79,    62,    10,    11,    14,
     164,    17,    22,    79,   168,   169,   170,   171,   172,    26,
      26,    26,    24,    27,    27,    27,    49,    84,   154,    33,
      34,    38,    48,    63,    50,    68,    69,    85,    80,    81,
      83,    88,   103,   145,   129,   150,   108,   162,   120,   111,
     109,   144,   157,    53,   188,   181,   182,   183,   184,   192,
     191,    82,   190,   195,   185,   149,    87,   153,   113,     0,
       0,     0,     0,     0,   196]])


m4_define([b4_conflicting_rules_max],
[[0]])


m4_define([b4_merger],
[[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0]])


m4_define([b4_glr_flag],
[[0]])


m4_define([b4_percent_define_syncline(lr.keep-unreachable-states)],
[[]])


m4_define([b4_check_max],
[[196]])


m4_define([b4_spec_graph_file],
[[]])


m4_define([b4_rline_min],
[[0]])


m4_define([b4_toknum],
[[     0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303]])


m4_define([b4_defgoto_max],
[[189]])


m4_define([b4_version],
[[2.7]])


m4_define([b4_translate_min],
[[0]])


m4_define([b4_stype],
[[]b4_syncline(23, [["parser.y"]])[

	int ival;

]])


m4_define([b4_pkgdatadir],
[[D:\win_flex_bison-latest\data]])


m4_define([b4_pgoto_min],
[[-101]])


m4_define([b4_rhs_max],
[[81]])


m4_define([b4_pgoto],
[[  -101,  -101,  -101,    58,  -101,    99,  -101,   128,    86,  -101,
    -101,  -101,  -101,   127,  -101,    39,  -101,    83,  -101,   -35,
    -101,   -84,  -101,  -101,   -53,  -101,   -76,   -71,    10,  -100,
     -85,   114,  -101]])


m4_define([b4_pact_max],
[[182]])


m4_define([b4_debug_flag],
[[1]])


m4_define([b4_yacc_flag],
[[0]])


m4_define([b4_spec_verbose_file],
[[]])


m4_define([b4_conflict_list_heads_min],
[[0]])


m4_define([b4_tname],
[["$][end", "error", "$][undefined", "id", "semicolon", "comma", "_const",
  "_var", "colon", "simple_type", "assignop", "digits", "assign", "relop",
  "plus", "minus", "letter", "procedure", "function", "num", "_array",
  "multiply", "divide", "_div", "_mod", "_and", "_not", "_if", "_then",
  "_for", "_else", "_to", "_do", "_or", "_of", "_range", "_while",
  "noequal", "GE", "GT", "LE", "LT", "leftB", "rightB", "leftSB",
  "rightSB", "program", "BEGINTOK", "ENDTOK", "$][accept", "programstruct",
  "program_head", "idlist", "program_body", "const_declarations",
  "const_declaration", "const_value", "var_declarations",
  "var_declaration", "subprogram_declarations", "subprogram",
  "subprogram_head", "formal_parameter", "parameter_list", "parameter",
  "var_parameter", "value_parameter", "subprogram_body",
  "compound_statement", "statement_list", "statement", "else_part",
  "procedure_call", "variable", "id_varpart", "expression_list",
  "expression", "simple_expression", "term", "factor", "type", "period", ]b4_null[]])


m4_define([b4_defact],
[[     0,     0,     0,     0,     0,     0,     0,     0,     1,    13,
       0,     0,     0,     0,     0,     2,    27,     9,     0,     0,
       0,     0,     0,     0,     0,    31,     0,     0,     6,     7,
       4,     5,     3,     0,    14,     0,     0,     0,    11,    10,
       8,    19,    22,     0,     0,    26,    25,    16,     0,     0,
      28,     0,     0,     0,     0,     0,    12,    17,    20,    23,
      18,    21,    24,     0,    90,     0,    29,     0,    36,    36,
       0,    59,     0,     0,     0,    53,     0,    47,    52,     0,
      32,    13,    15,     0,     0,     0,    34,     0,    50,     0,
       0,    61,    62,    84,     0,    83,     0,     0,    85,     0,
      66,    76,    82,     0,     0,    50,    50,    45,     0,    27,
      33,     0,     0,    30,     0,     0,     0,    39,    40,    41,
       0,    49,     0,    65,     0,     0,    89,    88,     0,    50,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,    50,    48,    46,    51,     0,
       0,     0,     0,    42,     0,     0,    37,    35,     0,    60,
      63,     0,    87,    57,    67,    73,    74,    75,    68,    69,
      70,    71,    72,    77,    78,    79,    80,    81,     0,    56,
      44,    93,     0,     0,    43,    38,    64,    86,    50,    54,
       0,     0,    91,    58,     0,    92,    50,    55]])


m4_define([b4_tokens_number],
[[49]])


m4_define([b4_stos_max],
[[81]])


m4_define([b4_merger_min],
[[0]])


m4_define([b4_table_max],
[[197]])


m4_define([b4_spec_name_prefix],
[[]])


m4_define([b4_epilogue],
[[]b4_syncline(940, [["parser.y"]])[

void ParseError(std::string msg,int line)
{
	std::cout<< "Parse errors ("<<msg<<") : "<< " in line "<< line <<std::endl;
}

int main(int argc, char* argv@{@}) 
{
	yyin = fopen("test1.txt","r");
	yydebug = 0;
	yyparse();
	//test();
	return 0;
}

void yyerror(const char* s) {
	//fprintf(stderr, "Parse error: %s in line %d\n", s,yylineno);
	//exit(1);
}
]])


m4_define([b4_table_ninf],
[[-63]])


m4_define([b4_prhs],
[[     0,     0,     3,     7,    13,    19,    25,    31,    37,    41,
      43,    47,    51,    56,    57,    61,    67,    71,    74,    77,
      79,    82,    85,    87,    90,    93,    95,    97,    98,   102,
     106,   112,   113,   117,   121,   125,   131,   132,   136,   140,
     142,   144,   146,   149,   153,   157,   161,   165,   167,   171,
     175,   176,   180,   182,   184,   190,   199,   204,   205,   208,
     210,   215,   218,   219,   223,   227,   229,   231,   235,   239,
     243,   247,   251,   255,   259,   263,   267,   269,   273,   277,
     281,   285,   289,   291,   293,   295,   297,   302,   306,   309,
     312,   314,   321,   327]])


m4_define([b4_check],
[[    53,    72,    37,    74,    88,     1,     1,     4,     9,    94,
       1,    96,     3,     1,    90,     3,     4,     1,     3,    20,
       4,   105,   106,     1,     1,     1,    97,     5,     5,     5,
       1,   131,   132,   133,     5,    88,     5,   108,     5,    27,
       5,    29,    27,     5,    29,   129,    43,    42,    36,   125,
      46,    36,   105,   106,   139,   140,   141,   142,   143,    47,
      48,   145,    47,    10,    48,    43,    43,    43,    10,    11,
      12,    13,    43,   144,    43,     3,   129,     3,    45,     7,
      45,    43,    24,    17,    18,    11,     1,   158,     3,    15,
      14,    15,   145,    19,     3,    42,    12,    44,    14,    15,
      26,    42,    11,    44,   188,    14,    15,    16,    50,    33,
      19,     0,   196,    47,   149,     3,    42,    33,     3,   190,
       3,    37,    38,    39,    40,    41,    11,     4,    11,    21,
      22,    23,    24,    25,    19,   188,    19,    42,    42,     6,
     130,     3,     3,   196,   134,   135,   136,   137,   138,     1,
       1,     1,     7,     5,     5,     5,     8,     8,     8,    12,
       4,     3,     3,    12,     4,     3,     3,    42,     4,     4,
      44,     4,     3,    32,    28,    35,    10,    43,     8,    11,
      81,    10,     9,    47,    30,    11,    11,    34,     9,     9,
      35,    63,    31,    11,   155,   109,    69,   114,    84,    -1,
      -1,    -1,    -1,    -1,    32]])


m4_define([b4_nterms_number],
[[33]])


m4_define([b4_rline_max],
[[929]])


m4_define([b4_dprec],
[[     0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0]])


m4_define([b4_percent_define_loc(lr.default-reductions)],
[[[[<default value>:-1.-1]], [[<default value>:-1.-1]]]])


m4_define([b4_rline],
[[     0,    42,    42,    59,    72,    75,    78,    81,    85,    96,
     105,   108,   112,   123,   131,   142,   155,   166,   176,   186,
     195,   205,   215,   224,   233,   242,   251,   261,   269,   280,
     291,   305,   313,   324,   335,   345,   356,   364,   375,   386,
     395,   404,   413,   423,   434,   446,   455,   466,   475,   479,
     483,   491,   502,   511,   520,   533,   549,   559,   567,   578,
     587,   599,   609,   615,   624,   635,   644,   653,   664,   675,
     686,   697,   708,   719,   730,   741,   752,   761,   772,   783,
     794,   805,   816,   825,   834,   843,   852,   864,   875,   885,
     896,   905,   918,   929]])


m4_define([b4_prhs_min],
[[0]])


m4_define([b4_percent_define_bison_variables(lr.keep-unreachable-states)],
[[]])


m4_define([b4_spec_outfile],
[[parser.tab.cpp]])


m4_define([b4_translate_max],
[[48]])


m4_define([b4_user_token_number_max],
[[303]])


m4_define([b4_r1_min],
[[0]])


m4_define([b4_max_left_semantic_context],
[[0]])


m4_define([b4_pgoto_max],
[[128]])


m4_define([b4_rules_number],
[[93]])


m4_define([b4_file_name_all_but_ext],
[[parser.tab]])


m4_define([b4_error_verbose_flag],
[[0]])


m4_define([b4_percent_define(lr.type)],
[[lalr]])


m4_define([b4_r2_min],
[[0]])


m4_define([b4_pact],
[[     4,   112,     9,   111,   123,    95,    96,     5,  -101,   133,
     138,   138,   138,   138,   139,  -101,   145,  -101,    22,    23,
      24,    29,   147,   156,   138,  -101,   158,    85,  -101,  -101,
    -101,   158,  -101,    91,   159,   148,   160,    66,  -101,  -101,
    -101,  -101,  -101,   115,   117,  -101,  -101,  -101,   151,    -1,
     138,   162,   163,    12,   164,   165,  -101,  -101,  -101,  -101,
    -101,  -101,  -101,    91,  -101,   126,  -101,   149,   125,   125,
     167,    53,    74,   169,    74,  -101,    16,  -101,  -101,   166,
    -101,   133,  -101,   168,    -1,    72,  -101,   170,    15,    74,
      74,  -101,    59,  -101,    74,  -101,    74,    74,  -101,   146,
      84,   108,  -101,   171,   141,    15,    15,  -101,    74,   145,
    -101,   140,    33,  -101,   138,   150,     3,  -101,  -101,  -101,
     173,  -101,    31,  -101,    35,    74,  -101,  -101,   134,    15,
      74,    74,    74,    74,    74,    74,    74,    74,    74,    74,
      74,    74,    74,    74,    74,    15,  -101,  -101,  -101,   136,
     174,   175,   153,  -101,   179,    72,  -101,  -101,    74,  -101,
    -101,    38,  -101,   154,    76,   108,   108,   108,    76,    76,
      76,    76,    76,  -101,  -101,  -101,  -101,  -101,   161,  -101,
    -101,  -101,   155,   180,  -101,  -101,  -101,  -101,    15,  -101,
      74,   182,  -101,  -101,   172,  -101,    15,  -101]])


m4_define([b4_dprec_min],
[[0]])


m4_define([b4_defact_min],
[[0]])


m4_define([b4_percent_define(lr.keep-unreachable-states)],
[[false]])


m4_define([b4_synclines_flag],
[[1]])


m4_define([b4_nondeterministic_flag],
[[0]])


m4_define([b4_defines_flag],
[[1]])


m4_define([b4_conflict_list_heads_max],
[[0]])


m4_define([b4_dir_prefix],
[[]])


m4_define([b4_merger_max],
[[0]])


m4_define([b4_undef_token_number],
[[2]])


m4_define([b4_percent_define_bison_variables(lr.type)],
[[]])


m4_define([b4_percent_define_loc(lr.keep-unreachable-states)],
[[[[<default value>:-1.-1]], [[<default value>:-1.-1]]]])


m4_define([b4_prhs_max],
[[327]])


m4_define([b4_spec_file_prefix],
[[]])


m4_define([b4_r1_max],
[[81]])


m4_define([b4_percent_define_bison_variables(lr.default-reductions)],
[[]])


m4_define([b4_percent_define_loc(lr.type)],
[[[[<default value>:-1.-1]], [[<default value>:-1.-1]]]])


m4_define([b4_toknum_min],
[[0]])


m4_define([b4_percent_define(lr.default-reductions)],
[[most]])


m4_define([b4_spec_defines_file],
[[parser.tab.h]])


m4_define([b4_conflicting_rules_min],
[[0]])


m4_define([b4_r1],
[[     0,    49,    50,    51,    51,    51,    51,    51,    52,    52,
      52,    52,    53,    54,    54,    55,    55,    56,    56,    56,
      56,    56,    56,    56,    56,    56,    56,    57,    57,    58,
      58,    59,    59,    60,    61,    61,    62,    62,    63,    63,
      64,    64,    65,    66,    67,    68,    69,    69,    69,    69,
      70,    70,    70,    70,    70,    70,    70,    71,    71,    72,
      72,    73,    74,    74,    75,    75,    76,    76,    76,    76,
      76,    76,    76,    77,    77,    77,    77,    78,    78,    78,
      78,    78,    78,    79,    79,    79,    79,    79,    79,    79,
      80,    80,    81,    81]])


m4_define([b4_pre_prologue],
[[]b4_syncline(2, [["parser.y"]])[


#include<stdio.h>
#include<stdlib.h>
#include<iostream>
#include<string>
#include"parser.h"
#include"transform.h"

extern int yylex();
extern int yyparse();
extern FILE* yyin;
extern int yylineno;

void yyerror(const char* s);
std::vector<ParseTreeNode> parseTree;
void ParseError(std::string msg,int line);
int parseTreeRoot;
]])


m4_define([b4_r2],
[[     0,     2,     3,     5,     5,     5,     5,     5,     3,     1,
       3,     3,     4,     0,     3,     5,     3,     2,     2,     1,
       2,     2,     1,     2,     2,     1,     1,     0,     3,     3,
       5,     0,     3,     3,     3,     5,     0,     3,     3,     1,
       1,     1,     2,     3,     3,     3,     3,     1,     3,     3,
       0,     3,     1,     1,     5,     8,     4,     0,     2,     1,
       4,     2,     0,     3,     3,     1,     1,     3,     3,     3,
       3,     3,     3,     3,     3,     3,     1,     3,     3,     3,
       3,     3,     1,     1,     1,     1,     4,     3,     2,     2,
       1,     6,     5,     3]])


m4_define([b4_check_min],
[[-1]])


m4_define([b4_states_number],
[[198]])


m4_define([b4_r2_max],
[[8]])


m4_define([b4_dprec_max],
[[0]])


m4_define([b4_defgoto],
[[    -1,     3,     4,   115,    15,    16,    23,    47,    25,    36,
      37,    54,    55,    86,   116,   117,   118,   119,   110,    75,
      76,    77,   189,    78,    98,    91,   122,   123,   100,   101,
     102,    66,   112]])


m4_define([b4_defact_max],
[[93]])


m4_define([b4_stos],
[[     0,     1,    46,    50,    51,     3,     1,     3,     0,     4,
      42,    42,     1,    42,     6,    53,    54,     3,    52,    52,
      52,    52,     3,    55,     7,    57,     1,     5,    43,    43,
      43,     1,    43,    12,     4,    52,    58,    59,     3,     1,
       3,     3,    11,    14,    15,    16,    19,    56,     3,     8,
       4,    17,    18,    47,    60,    61,    68,     3,    11,    19,
       3,    11,    19,    12,     9,    20,    80,    52,     3,     3,
       1,     3,    27,    29,    36,    68,    69,    70,    72,    73,
       4,     4,    56,    44,     8,    42,    62,    62,     4,    42,
      44,    74,     3,    11,    15,    19,    26,    42,    73,    76,
      77,    78,    79,     3,    76,     1,     4,    48,    10,    54,
      67,    11,    81,    80,     7,    52,    63,    64,    65,    66,
       8,    70,    75,    76,    75,    42,    79,    79,    76,    28,
      12,    14,    15,    33,    37,    38,    39,    40,    41,    21,
      22,    23,    24,    25,    10,    32,    70,    70,    76,    57,
      35,     5,    45,    66,     8,     4,    43,     9,     5,    43,
      45,    75,    43,    70,    77,    78,    78,    78,    77,    77,
      77,    77,    77,    79,    79,    79,    79,    79,    76,    70,
      68,    11,    11,    34,     9,    64,    76,    43,    30,    71,
      31,    35,     9,    70,    76,    11,    32,    70]])


m4_define([b4_final_state_number],
[[8]])


m4_define([b4_defgoto_min],
[[-1]])


m4_define([b4_file_name],
[["parser.y"]])


m4_define([b4_percent_define_syncline(lr.default-reductions)],
[[]])


m4_define([b4_percent_define_syncline(lr.type)],
[[]])


m4_define([b4_locations_flag],
[[0]])


m4_define([b4_rhs_min],
[[-1]])


m4_define([b4_pact_min],
[[-101]])


m4_define([b4_conflicting_rules],
[[     0]])


